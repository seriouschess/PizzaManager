import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})

/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.7.4.0 (NJsonSchema v10.1.26.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class HttpServiceService {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
      this.http = http ? http : <any>window;
      this.baseUrl = baseUrl ? baseUrl : "http://127.0.0.1:5000";
  }

  getAllPizzas(): Promise<Pizza[]> {
      let url_ = this.baseUrl + "/Pizza";
      url_ = url_.replace(/[?&]$/, "");

      let options_ = <RequestInit>{
          method: "GET",
          headers: {
              "Accept": "application/json"
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processGetAllPizzas(_response);
      });
  }

  protected processGetAllPizzas(response: Response): Promise<Pizza[]> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          if (Array.isArray(resultData200)) {
              result200 = [] as any;
              for (let item of resultData200)
                  result200!.push(Pizza.fromJS(item));
          }
          return result200;
          });
      } else if (status !== 200 && status !== 204) {
          return response.text().then((_responseText) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
          });
      }
      return Promise.resolve<Pizza[]>(<any>null);
  }

  addPizza(new_pizza: Pizza): Promise<PizzaDto[]> {
      let url_ = this.baseUrl + "/Pizza";
      url_ = url_.replace(/[?&]$/, "");

      const content_ = JSON.stringify(new_pizza);

      let options_ = <RequestInit>{
          body: content_,
          method: "POST",
          headers: {
              "Content-Type": "application/json",
              "Accept": "application/json"
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processAddPizza(_response);
      });
  }

  protected processAddPizza(response: Response): Promise<PizzaDto[]> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          if (Array.isArray(resultData200)) {
              result200 = [] as any;
              for (let item of resultData200)
                  result200!.push(PizzaDto.fromJS(item));
          }
          return result200;
          });
      } else if (status !== 200 && status !== 204) {
          return response.text().then((_responseText) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
          });
      }
      return Promise.resolve<PizzaDto[]>(<any>null);
  }
}

export class Pizza implements IPizza {
  pizza_id!: number;
  name?: string | undefined;
  pizza_dough_type?: string | undefined;
  is_calzone!: boolean;

  constructor(data?: IPizza) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.pizza_id = _data["pizza_id"];
          this.name = _data["name"];
          this.pizza_dough_type = _data["pizza_dough_type"];
          this.is_calzone = _data["is_calzone"];
      }
  }

  static fromJS(data: any): Pizza {
      data = typeof data === 'object' ? data : {};
      let result = new Pizza();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["pizza_id"] = this.pizza_id;
      data["name"] = this.name;
      data["pizza_dough_type"] = this.pizza_dough_type;
      data["is_calzone"] = this.is_calzone;
      return data; 
  }
}

export interface IPizza {
  pizza_id: number;
  name?: string | undefined;
  pizza_dough_type?: string | undefined;
  is_calzone: boolean;
}

export class PizzaDto implements IPizzaDto {
  name?: string | undefined;
  pizza_dough_type?: string | undefined;
  is_calzone!: boolean;

  constructor(data?: IPizzaDto) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.name = _data["name"];
          this.pizza_dough_type = _data["pizza_dough_type"];
          this.is_calzone = _data["is_calzone"];
      }
  }

  static fromJS(data: any): PizzaDto {
      data = typeof data === 'object' ? data : {};
      let result = new PizzaDto();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["name"] = this.name;
      data["pizza_dough_type"] = this.pizza_dough_type;
      data["is_calzone"] = this.is_calzone;
      return data; 
  }
}

export interface IPizzaDto {
  name?: string | undefined;
  pizza_dough_type?: string | undefined;
  is_calzone: boolean;
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
      super();

      this.message = message;
      this.status = status;
      this.response = response;
      this.headers = headers;
      this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
      return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
  if (result !== null && result !== undefined)
      throw result;
  else
      throw new ApiException(message, status, response, headers, null);
}
